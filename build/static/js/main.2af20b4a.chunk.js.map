{"version":3,"sources":["Components/toolbar/toolbar.js","Components/customEditor/customEditor.js","Views/editor.js","App.js","serviceWorker.js","index.js"],"names":["initializeIcons","theme","getTheme","contentStyles","mergeStyleSets","container","display","flexFlow","alignItems","header","fonts","xLargePlus","flex","borderTop","palette","themePrimary","color","neutralPrimary","fontSize","FontSizes","xLarge","fontWeight","FontWeights","semibold","padding","body","overflowY","selectors","p","margin","marginTop","marginBottom","Toolbar","state","isModalOpen","fileUploaded","files","fileCount","handleUpload","setState","closeModal","items","key","text","iconProps","iconName","onClick","props","onFileDownload","farItems","ariaLabel","iconOnly","console","log","this","CommandBar","overflowItems","_overflowItems","overflowButtonProps","overflowProps","Modal","isOpen","isBlocking","onDismiss","className","required","allowBrowse","allowMultiple","allowPaste","allowDrop","dropOnPage","maxFiles","ref","pond","onupdatefiles","fileItems","map","fileItem","file","length","onFileUpload","Component","CustomEditor","aceRef","fileName","name","fileType","type","reader","FileReader","onload","e","refs","aceEditor","editor","setValue","target","result","readAsText","File","getValue","FileSaver","saveAs","placeholder","mode","width","height","onLoad","onChange","showPrintMargin","showGutter","highlightActiveLine","value","setOptions","enableBasicAutocompletion","enableEmmet","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","commands","bindKey","win","mac","exec","Editor","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2af20b4a.chunk.js","sourcesContent":["import 'filepond/dist/filepond.min.css';\r\nimport { FontSizes, FontWeights, getTheme, mergeStyleSets, Modal } from 'office-ui-fabric-react';\r\nimport { CommandBar } from 'office-ui-fabric-react/lib/CommandBar';\r\nimport { initializeIcons } from 'office-ui-fabric-react/lib/Icons';\r\nimport React, { Component } from 'react';\r\nimport { FilePond } from 'react-filepond';\r\nimport './toolbar.css';\r\n\r\n//icons for fabric ui\r\ninitializeIcons();\r\n\r\nconst theme = getTheme();\r\nconst contentStyles = mergeStyleSets({\r\n    container: {\r\n      display: 'flex',\r\n      flexFlow: 'column nowrap',\r\n      alignItems: 'stretch'\r\n    },\r\n    header: [\r\n      theme.fonts.xLargePlus,\r\n      {\r\n        flex: '1 1 auto',\r\n        borderTop: `4px solid ${theme.palette.themePrimary}`,\r\n        color: theme.palette.neutralPrimary,\r\n        display: 'flex',\r\n        fontSize: FontSizes.xLarge,\r\n        alignItems: 'center',\r\n        fontWeight: FontWeights.semibold,\r\n        padding: '12px 12px 14px 24px'\r\n      }\r\n    ],\r\n    body: {\r\n      flex: '4 4 auto',\r\n      padding: '0 24px 24px 24px',\r\n      overflowY: 'hidden',\r\n      selectors: {\r\n        p: {\r\n          margin: '14px 0'\r\n        },\r\n        'p:first-child': {\r\n          marginTop: 0\r\n        },\r\n        'p:last-child': {\r\n          marginBottom: 0\r\n        }\r\n      }\r\n    }\r\n  });\r\n  \r\n\r\nexport default class Toolbar extends Component {\r\n\r\n    state = {\r\n        isModalOpen: false,\r\n        fileUploaded: false,\r\n        files: [],\r\n        fileCount: 0\r\n    }\r\n\r\n    handleUpload = () => {\r\n        this.setState({isModalOpen: true})\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.setState({isModalOpen: false})\r\n    }\r\n\r\n    items = [\r\n        {\r\n          key: 'upload',\r\n          text: 'Upload',\r\n          iconProps: { iconName: 'Upload' },\r\n          onClick: this.handleUpload\r\n        },\r\n        {\r\n          key: 'download',\r\n          text: 'Download',\r\n          iconProps: { iconName: 'Download' },\r\n          onClick: () => this.props.onFileDownload()\r\n        }\r\n      ];\r\n      \r\n    farItems = [\r\n        {\r\n          key: 'info',\r\n          text: 'Info',\r\n          // This needs an ariaL    abel since it's icon-only\r\n          ariaLabel: 'Info',\r\n          iconOnly: true,\r\n          iconProps: { iconName: 'Info' },\r\n          onClick: () => console.log('Info')\r\n        }\r\n    ];\r\n    \r\n    render() {\r\n        const { fileCount, isModalOpen, files } = this.state;\r\n\r\n        return (\r\n            <div>\r\n            <CommandBar\r\n                items={this.items}\r\n                overflowItems={this._overflowItems}\r\n                overflowButtonProps={this.overflowProps}\r\n                farItems={this.farItems}\r\n                ariaLabel=\"Use left and right arrow keys to navigate between commands\"\r\n            />\r\n            <Modal\r\n                isOpen={isModalOpen}\r\n                isBlocking={false}\r\n                onDismiss={this.closeModal}\r\n            >\r\n                <div className={contentStyles.header}>\r\n                    <span>Upload a file to edit</span>\r\n                </div>\r\n                <FilePond \r\n                    required={true} \r\n                    allowBrowse={true} \r\n                    allowMultiple={true} \r\n                    allowPaste={true} \r\n                    allowDrop={true} \r\n                    dropOnPage={true}\r\n                    maxFiles={1}\r\n                    ref={ref => this.pond = ref}\r\n                    files={files}\r\n                    className=\"fileUploadBox\"\r\n                    onupdatefiles={fileItems => {\r\n                        this.setState({\r\n                          files: fileItems.map(fileItem => fileItem.file)\r\n                        });\r\n                        if(fileItems.length > 0) {\r\n                            this.props.onFileUpload(fileItems[0].file)\r\n                            if(fileCount === 0) {\r\n                                this.setState({isModalOpen: false})\r\n                                this.setState({fileCount: 1})\r\n                            }\r\n                        }\r\n                      }}    \r\n                    />\r\n            </Modal>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n","import React, { Component, Fragment } from 'react';\r\nimport AceEditor from 'react-ace';\r\nimport \"ace-builds/src-min-noconflict/ext-language_tools\";\r\nimport \"ace-builds/src-noconflict/mode-javascript\";\r\nimport \"ace-builds/src-noconflict/snippets/javascript\";\r\nimport \"ace-builds/src-noconflict/theme-monokai\";\r\nimport \"ace-builds/src-noconflict/ext-emmet\";\r\nimport './editor.css';\r\nimport Toolbar from '../toolbar/toolbar';\r\nimport FileSaver from 'file-saver';\r\n\r\nexport default class CustomEditor extends Component {\r\n\r\n    aceRef = null\r\n    \r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            isModalOpen: false,\r\n            fileName: '',\r\n            fileType: 'text/javascript'\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.aceRef = this.refs.aceEditor;\r\n    }\r\n\r\n    onFileUpload = (file) => {\r\n        const fileName = file.name;\r\n        const fileType = file.type;\r\n        this.setState({ fileName, fileType });\r\n        const reader = new FileReader();\r\n\r\n        reader.onload = (e) => {\r\n            this.aceRef = this.refs.aceEditor;\r\n            this.aceRef.editor.setValue(e.target.result);\r\n        }\r\n\r\n        reader.readAsText(file, \"UTF-8\");\r\n    }\r\n\r\n    onFileDownload = () => {\r\n        const file = new File([this.aceRef.editor.getValue()], this.state.fileName, {type: this.state.fileType+\";charset=utf-8\"});\r\n        FileSaver.saveAs(file);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Toolbar onFileDownload={this.onFileDownload} onFileUpload={this.onFileUpload} />\r\n                <AceEditor\r\n                ref=\"aceEditor\"\r\n                placeholder=\"Start writing magic!\"\r\n                mode=\"javascript\"\r\n                theme=\"monokai\"\r\n                name=\"mainEditor\"\r\n                width=\"100vw\"\r\n                height=\"100vh\"\r\n                onLoad={this.onLoad}\r\n                onChange={this.onChange}\r\n                fontSize={12}\r\n                showPrintMargin={false}\r\n                showGutter={true}\r\n                highlightActiveLine={true}\r\n                value={`console.log(\"Hello World!\")`}\r\n                setOptions={{\r\n                enableBasicAutocompletion: true,\r\n                enableEmmet: true,\r\n                enableLiveAutocompletion: true,\r\n                enableSnippets: true,   \r\n                showLineNumbers: true,\r\n                tabSize: 2,\r\n                }}\r\n                commands={[\r\n                    {   //custom commands for saving and opening files\r\n                        name: 'saveFile', \r\n                        bindKey: {win: 'Ctrl-s', mac: 'Command-s'}, //key combination used for the command.\r\n                        exec: () => { this.onFileDownload()}  //function to execute when keys are pressed.\r\n                    }\r\n                ]}\r\n                />\r\n            </Fragment>      \r\n        )\r\n    }\r\n\r\n}","import React, { Component } from 'react'\r\nimport CustomEditor from '../Components/customEditor/customEditor'\r\n\r\nexport default class Editor extends Component {\r\n    \r\n\r\n    \r\n    render() {\r\n        return (\r\n            <CustomEditor/>        \r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Editor from './Views/editor';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Editor/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}